gpus = ['0']

batch_size = 50

IM0_dir = '/data1/dj/Norm_BCA_metrics/BCA-Trimmed-Refined/All_original-CT-254'
volume_json_dir = '/data1/dj/Norm_BCA_metrics/BCA-Trimmed-Refined/All_original-CT-254_json'
output_cavass_dir = '/data1/dj/Norm_BCA_metrics/BCA-Trimmed-Refined/All_original-CT-254_bim'

# You need to convert image format to JSON format for processing.
# You can set this to false if you already performed the converting.
# And don't worry about the redundant conversion, only image files without JSON format would be converted.
convert_json = true

# Declare the labels that need to be inferred.
#inference_labels = ['SAT_WB', 'VAT_WB', 'SMT_WB', 'Sk_WB']
inference_labels = ['Skn_WB']

# The following contents define the pre-trained weights for each class.
pretrained_model_zoo = '/data1/dj/bca_pretrained'

# Syntax ${arg} means referencing variable arg.
# This is not a standard TOML language syntax. I just implemented this for convenience.
[labels.SAT_WB]
# Declare the network class.
# The definition of model class is in ~/models/__init__.py
model = 'ganet'
pretrained_weights = '${pretrained_model_zoo}/SAT_whole_body/SAT_ganet_wb.pt'
network_config = '${pretrained_model_zoo}/SAT_whole_body/network_config.toml'
data_property = '${pretrained_model_zoo}/SAT_whole_body/data_property.json'
batch_size = 80

[labels.VAT_WB]
model = 'ganet'
pretrained_weights = '${pretrained_model_zoo}/VAT_whole_body/VAT_ganet_wb.pt'
network_config = '${pretrained_model_zoo}/VAT_whole_body/network_config.toml'
data_property = '${pretrained_model_zoo}/VAT_whole_body/data_property.json'
batch_size = 80

[labels.SMT_WB]
model = 'ganet'
pretrained_weights = '${pretrained_model_zoo}/SMT_whole_body/SMT_ganet_wb.pt'
network_config = '${pretrained_model_zoo}/SMT_whole_body/network_config.toml'
data_property = '${pretrained_model_zoo}/SMT_whole_body/data_property.json'
batch_size = 80

[labels.Sk_WB]
model = 'ganet'
pretrained_weights = '${pretrained_model_zoo}/Sk_whole_body/Sk_ganet_wb.pt'
network_config = '${pretrained_model_zoo}/Sk_whole_body/network_config.toml'
data_property = '${pretrained_model_zoo}/Sk_whole_body/data_property.json'
batch_size = 80

[labels.IAM]
model = 'unet_plus_plus'
pretrained_weights = '${pretrained_model_zoo}/IAM_UNet++.pt'
post_process = ['keeping_largest_region', ]

[labels.OAM]
model = 'unet_plus_plus'
pretrained_weights = '${pretrained_model_zoo}/OAM_UNet++.pt'
post_process = ['keeping_largest_region', 'filling']

[labels.Skn]
model = 'unet_plus_plus'
pretrained_weights = '${pretrained_model_zoo}/Skn/Skn_unet++.pt'
network_config = '${pretrained_model_zoo}/Skn/network_config.toml'
data_property = '${pretrained_model_zoo}/Skn/data_property.json'
post_process = ['keeping_largest_region', 'filling']

[labels.Skn_WB]
model = 'unet_plus_plus'
pretrained_weights = '${pretrained_model_zoo}/Skn_whole_body/Skn_whole-body_unet++.pt'
network_config = '${pretrained_model_zoo}/Skn_whole_body/network_config.toml'
data_property = '${pretrained_model_zoo}/Skn_whole_body/data_property.json'
post_process = ['keeping_largest_region', 'filling']
batch_size = 5